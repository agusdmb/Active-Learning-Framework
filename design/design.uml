@startuml

class ActiveLerner {
    +fit()
    +select(n: Int): Int[]
    +ask(indexes: Int[]): Int[]
    +add_new_known(indexes: Int[], y: Int[])
    +test(): Float
    +get_avgs(): Float[]
}

package Hotspots {
    Interface Selector {
        -query(model: Model, data: Float[][], n: Int): Int[]
        +select(model: Model, data: Float[][], n: Int): Int[]
    }

    Interface Model {
        +fit(X: Float[][], y: Int[])
        +preditct(X: Float[][]): Int[]
        +predict_proba(X: Float[][]): Float[]
        +score(X: Float[][], y: Int[]): Float
    }

    Interface Oracle {
        - target_names
        +ask(readable_X: String[], recoms: Int[])
        -show_element(x: Float[], recom: Int)
        -show_options()
        -ask_for_element(x: Float[], recom: Int)
        -validate_answer(answer: Int)
    }
}

package User {
    Interface DatasetTrain {
        + X: Float[][]
        + y: Int[]
        +append(X: Float[][], y: Int[])
        -_separate_test(test_size: Float, random_state: Int)
    }

    Interface DatasetUnlabeled {
        + X: Float[][]
        +remove_elements(indexes: Int[])
        +get_element_readable(i: Int)
    }
}

class SKLModel {
}

package Models {
    class MultinomialNBModel {
    }
    class SVCModel {
    }
    class DecisionTreeClassifierModel {
    }
    class LogisticRegressionModel {
    }
    class MLPClassifierModel {
    }
}

package Selectors {
    class UncertaintySelector {
        }
    class CertaintySelector {
        }
    class RandomSelector {
        }
}


ActiveLerner o-- Selector
ActiveLerner o-- Model
ActiveLerner o-- Oracle
ActiveLerner o-- DatasetTrain
ActiveLerner o-- DatasetUnlabeled
Model <|-- SKLModel
SKLModel <|-- Models
Selector <|-- Selectors

@enduml
