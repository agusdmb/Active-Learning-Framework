@startuml
class ActiveLerner {
    +fit()
    +select(n: Int): Int[]
    +ask(indices: Int[]): Int[]
    +tag_elements(indices: Int[], y: Int[])
    +change_selector(Selector)
    +get_scores(): Int[]
    -_test(): Float
}

package Hotspots {
    Interface Selector {
        +select(model: Model, data: Float[][], n: Int): Int[]
    }

    Interface Model {
        +fit(X: Float[][], y: Int[])
        +preditct(X: Float[][]): Int[]
        +predict_proba(X: Float[][]): Float[]
        +score(X: Float[][], y: Int[]): Float
    }

    Interface Oracle {
        - target_names
        +ask(readable_X: String[], recoms: Int[])
        -show_element(x: Float[], recom: Int)
        -show_options()
        -ask_for_element(x: Float[], recom: Int)
        -validate_answer(answer: Int)
    }
}

package User {
    Interface Dataset {
        + X: Float[][]
        + y: Int[]
        + X_unlabeled: Float[][]
        +tag_elements(indices: Int[], tags: Int[])
        +get_unlabeled_readable(i: Int): String[]
        +get_X(): Float[][]
        +get_y(): Int[]
        +get_X_unlabeled(): Float[][]
        +get_unlabeled(): Float[][]
        -_split_X(test_size: Float, random_state: Int)
        -_get_train_indices(): Int[]
        -_get_unlabeled_indices(): Int[]
    }
}

package Selectors {
    class UncertaintySelector {
        }
    class CertaintySelector {
        }
    class MinDiffSelector {
        }
    class EntropySelector {
        }
    class RandomSelector {
        }
}


ActiveLerner o-- Selector
ActiveLerner o-- Model
ActiveLerner o-- Oracle
ActiveLerner o-- Dataset
Selector <|-- Selectors
@enduml
